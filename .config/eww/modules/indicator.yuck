(defwidget indicators []
    (box :class "indicator"
        (box :orientation "h" :space-evenly false
            (recorder_icon)
            (do-not-disturb_icon)
            (volume_icon)
            (battery_icon)
            (idevice_battery_icon)
            (network_icon)
        )
    )
)

(defwidget state_icon [condition text ?onclick ?limit-width]
    (button :class "indicator-icon"
            :visible {condition}
            :valign "center"
            :onclick {onclick}
            (label :text "${text}"
                    :limit-width {limit-width})
    )
)

(defwidget state_icon_dropdown [name reveal]
    (revealer   :transition 'slidebottom'
                :reveal {reveal}
                :duration {ANIM_DURATION}

        (box :orientation 'v'
            :space-evenly false)

    )
)

(defwidget example_icon []
    (button :onclick "scripts/toggle_example_dropdown.sh"
            :class "indicator"
            "Example"
    )
)

(defwidget example_dropdown []
    (revealer :transition "slidebottom" :reveal {open_example_dropdown} :duration {ANIM_DURATION}
        (box :orientation "v" :space-evenly false :class "control-center"
            (box :orientation "h" :space-evenly true
                (quick_settings_button  :condition {airplane_mode == false}
                    :action "rfkill toggle wifi"
                    :icon "󰤨"
                    :label "Wifi"
                    :class ""
                )
                (quick_settings_button  :condition {airplane_mode == false}
                    :action "rfkill toggle wlan"
                    :icon ""
                    :label "Ethernet"
                    :class ""
                )
            )
            (network_list)
        )
    )
)

; Own widgets

(defwidget do-not-disturb_icon []
    (state_icon :condition {do-not-disturb == false ? false : true}
                :text "󰍷"
                :limit-width 1
    )
)

(defwidget network_icon []
    (state_icon :condition true
                :onclick {open_network_dropdown ? "eww close network_dropdown && eww update open_network_dropdown='false'" : "eww open network_dropdown && eww update open_network_dropdown='true'"}
                :text {network.essid == "lo" ? "󰤭" : network.signal == "" ? "󰤩" : network.signal < 25 ? "󰤟" : network.signal < 50 ? "󰤢" : network.signal < 75 ? "󰤥" : "󰤨"}
                :limit-width 15
    )
)

(defwidget network_dropdown []
    (revealer :transition "crossfade" :reveal {open_network_dropdown} :duration {ANIM_DURATION}
        (box :orientation "v" :space-evenly false :class "control-center"
            (box :orientation "h" :space-evenly true
                (quick_settings_button  :condition {wifi_enabled == "enabled" ? false : true}
                    :action "rfkill toggle wlan"
                    :icon "󰤨"
                    :label "Wi-Fi"
                    :class "quick-settings-dropdown"
                )
                (box)
            )
            (network_list)
        )
    )
)

(defwidget recorder_icon []
    (state_icon :condition {recording == false ? false : true}
                :text "󰻃"
                :limit-width 1
    )
)

(defwidget theme_icon []
    (state_icon :condition true
                :text {current_theme == "dark" ? "󱎖 Dark" : "󰖨 Light"}
                :limit-width 7
    )
)

(defwidget volume_icon []
    (eventbox :onscroll "scripts/change_volume_onscroll.sh {} ${volume.percentage}"
        :onrightclick "wpctl set-mute @DEFAULT_SINK@ toggle"
        (state_icon :condition true
                    :text {volume.status == "MUTED" ? "󰸈 ${volume.percentage}%" : volume.percentage < 33 ? " ${volume.percentage}%" : volume.percentage < 67 ? " ${volume.percentage}%" : " ${volume.percentage}%"}
                    :limit-width 6
        )
    )
)

(defwidget battery_icon []
    (box :visible {EWW_BATTERY == "" ? false : true}
        (state_icon :condition true
                    :text {EWW_BATTERY.BAT0.status == "Charging" ? " ${EWW_BATTERY.BAT0.capacity}%" : EWW_BATTERY.BAT0.capacity > 90 ? " ${EWW_BATTERY.BAT0.capacity}%" : EWW_BATTERY.BAT0.capacity > 75 ? " ${EWW_BATTERY.BAT0.capacity}%" : EWW_BATTERY.BAT0.capacity > 50 ? " ${EWW_BATTERY.BAT0.capacity}%" : EWW_BATTERY.BAT0.capacity > 25 ? " ${EWW_BATTERY.BAT0.capacity}%" : " ${EWW_BATTERY.BAT0.capacity}%"}
                    :limit-width 6
        )
    )
)

(defwidget idevice_battery_icon []
    (state_icon :condition {idevice_detected}
        :text " ${idevice_info.capacity}%"
        :limit-width 6
    )
)